preset raw;

#include "/Shaders/Internal/shadow_cast_shared.swsl"

const float LIGHTING_HEIGHT = 1;

const float g_MinVariance = 0;

varying vec2 worldPosition;

uniform vec4 lightColor;
// Position of the light, in world coordinates.
uniform vec2 lightCenter;
uniform float lightRange;
uniform float lightPower;
uniform float lightIndex;
uniform sampler2D shadowMap;

void vertex()
{
    vec3 transformed = modelMatrix * vec3(VERTEX, 1.0);
    worldPosition = transformed.xy;
    transformed = projectionMatrix * viewMatrix * transformed;

    VERTEX = transformed.xy;
}

float shadowContrib(vec2 diff)
{
    float dist = length(diff);

    return smoothstep(0, 1, ChebyshevUpperBound(occludeDepth(diff, shadowMap, lightIndex), dist));
}

void fragment()
{
    float mask = texture(TEXTURE, UV).r;

    vec2 diff = worldPosition - lightCenter;

    // Calculate vector perpendicular to light vector.
    // So we can sample it to get a decent soft shadow?
    vec2 perpendicular = normalize(cross(vec3(diff, 0), vec3(0, 0, 1)).xy) * 1.0 / 32.0;

    float ourDist = length(diff);

    vec2 occlDist = occludeDepth(diff, shadowMap, lightIndex);

    // Change soft shadow size based on distance from primary occluder.
    float distRatio = (ourDist - occlDist.x) / occlDist.x / 2;

    perpendicular *= distRatio;

    // Totally not hacky PCF on top of VSM.
    float occlusion = smoothstep(0.1, 1, ChebyshevUpperBound(occlDist, ourDist));

    occlusion += shadowContrib(diff + perpendicular);
    occlusion += shadowContrib(diff - perpendicular);
    occlusion += shadowContrib(diff + perpendicular * 2);
    occlusion += shadowContrib(diff - perpendicular * 2);
    occlusion += shadowContrib(diff + perpendicular * 3);
    occlusion += shadowContrib(diff - perpendicular * 3);

    occlusion /= 7;

    if (occlusion == 0.0)
    {
        discard;
    }

    float dist = dot(diff, diff) + LIGHTING_HEIGHT;
    float val = clamp((1 - clamp(sqrt(dist) / lightRange, 0, 1)) * (1 / (sqrt(dist + 1))), 0, 1);

    val *= lightPower;
    val *= mask;

    COLOR = vec4(lightColor.rgb, val * occlusion);
}
